import "std/costume"
struct Sprite {
    id: string,
    name: string,
    is_stage: bool,
    costumes: array<Costume>
}

impl Sprite {
    fn add_costume(spr: Sprite, costume: Costume) void {
        js := $.create_js_object()
        // | { type: "AddSprCostume"; id: string; name: string; format: FileFormat; file: string; anchorX: number; anchorY: number }
        js:set("type", "AddSprCostume")
        js:set("id", spr.id)
        js:set("name", costume.name)
        js:set("format", costume.format)
        js:set("file", costume.file)
        js:set("anchorX", costume.anchor_x)
        js:set("anchorY", costume.anchor_y)
        $.label_push_object(stat_label, js)
    }
    
    fn js_object(spr: Self) JsObject {
        js := $.create_js_object()
        // | { type: "CreateSpr"; id: string; name: string; isStage: boolean }
        js:set("type", "CreateSpr")
        js:set("id", spr.id)
        js:set("name", spr.name)
        js:set("isStage", spr.is_stage)
        return js
    }
}

export fn make_sprite(name: string, is_stage: bool) Sprite {
    v := Sprite::{
        id: $.reserve(),
        name: name,
        is_stage: is_stage,
        costumes: make_array<Costume>()
    }
    $.label_push_object(stat_label, v:js_object())
    return v
}