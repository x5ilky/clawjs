import "intrin"
import "binding"
import "sprite"

export fn test() void {

}

interface Display {
    fn display(self: Self) void
}
impl Display for string {
    fn display($1: string) void {
        $intrinsic "$1args-print"
    }
}
impl Display for int {
    fn display($1: int) void {
        $intrinsic "$1args-print"
    }
}
impl Display for JsObject {
    fn display($1: JsObject) void {
        $intrinsic "$1args-print"
    }
}
impl Display for label {
    fn display($1: label) void {
        $intrinsic "$1args-print"
    }
}
export fn print<T + Display>(a: T) void {
    a:display()
}
export fn print_raw<T>($1: T) void {
    $intrinsic "$1args-print"
}

export stage := make_sprite("Stage", true)