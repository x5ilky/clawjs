impl Sprite {
    fn on_flag(spr: Self, l: label) void {
        // | { type: "Flag"; target: string; label: string }
        js := $.create_js_object()
        js:set("type", "Flag")
        js:set("target", spr.id)
        js:set("label", $.label_get_name(l))
        $.label_push_object(stat_label, js)
        $.set_label(l)
    }
}

struct BinaryOperation {
    left: JsObject,
    right: JsObject,
    oper: string
}
impl Runtime for BinaryOperation {
    fn sizeof() number {
        return 1
    }
    fn to_scratch_value(bo: Self) JsObject {
        js := $.create_js_object()
        // | { key: "BinaryOperation", oper: BinaryOperation, left: IlValue, right: IlValue }
        js:set("key", "BinaryOperation")
        js:set("oper", "Add")
        js:set("left", bo.left)
        js:set("right", bo.right)
        return js
    } 
}

impl<T + Runtime, U + Runtime> Add<U, BinaryOperation> for T {
    fn add(left: T, right: U) BinaryOperation {
        v := BinaryOperation::{
            left: left:to_scratch_value(),
            right: right:to_scratch_value(),
            oper: "Add"
        }
        return v
    }
}

export fn goto<T + Runtime, U + Runtime>(x: T, y: U) void {
    js := $.create_js_object()
    // | { type: "GotoXY"; x: IlValue; y: IlValue }
    js:set("type", "GotoXY")
    js:set("x", x:to_scratch_value())
    js:set("y", y:to_scratch_value())
    $.label_push_object($scope, js)
}
export fn turn_right<T + Runtime>(deg: T) void {
    js := $.create_js_object()
    // | { type: "TurnRight"; degrees: IlValue }
    js:set("type", "TurnRight")
    js:set("degrees", deg:to_scratch_value())
    $.label_push_object($scope, js)
}
export fn forever(l: label) void {
    // | { type: "Forever"; label: string }
    js := $.create_js_object()
    js:set("type", "Forever")
    js:set("label", $.label_get_name(l))
    $.label_push_object($scope, js)
    $.set_label(l)
    
}