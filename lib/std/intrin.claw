import "std/option"

impl JsObject {
    fn set<T>(self: Self, key: string, value: T) void {
        self:set_internal(key, value)
    }

    fn set_internal<T>($1: Self, $2: string, $3: T) void {
        $intrinsic "$3args-js_object_set"
    }
}

struct IntrinsicBinding {
}

impl IntrinsicBinding {
    fn create_js_object() JsObject {
        return $intrinsic "$0args-js_object_create"
    }

    fn set_label($1: label) void {
        $intrinsic "$1args-set_label"
    }
    fn create_stat_label() label {
        return $intrinsic "$0args-create_stat_label"
    }
    fn label_push_object($1: label, $2: JsObject) void {
        $intrinsic "$2args-label_push_object"
    }
    fn label_get_name($1: label) string {
        return $intrinsic "$1args-get_label_name"
    }
    fn reserve() string {
        return $intrinsic "$0args-reserve"
    }
}
export $ := IntrinsicBinding::{}
export stat_label := $.create_stat_label()

$.set_label(stat_label)

impl<T> array<T> {
    fn push(self: Self<T>, value: T) T {
        return self:__push(value)
    }
    fn __push($1: Self<T>, $2: T) T {
        return $intrinsic "$2args-array_push"
    }
    fn pop(arr: Self<T>) Option<T> {
        if arr:len() > 0 {
            return make_some<T>(arr:pop_unsafe())
        }
        return make_none<T>()
    }
    fn pop_unsafe(self: Self<T>) T {
        return self:__pop()
    }
    fn __pop($1: Self<T>) T {
        return $intrinsic "$1args-array_pop"
    }
    fn get(self: Self<T>, index: number) T {
        return self:__get(index)
    }
    fn __get($1: Self<T>, $2: number) T {
        return $intrinsic "$2args-array_get"
    }
    fn set(self: Self<T>, index: number, value: T) T {
        return self:__set(index, value)
    }
    fn __set($1: Self<T>, $2: number, $3: T) T {
        return $intrinsic "$3args-array_set"
    }
    fn len(self: Self<T>) number {
        return self:__len()
    }
    fn __len($1: Self<T>) number {
        return $intrinsic "$1args-array_len"
    }
}

fn __array_new<T>() array<T> {
    return $intrinsic "$0args-array_new"
}
export fn make_array<T>() array<T> {
    return __array_new<T>()
}